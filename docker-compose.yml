services:
  server:
    container_name: server
    env_file: .env
    build:
      context: .
      dockerfile: server.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/postgres
      - GOOSE_DBSTRING=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/postgres
      - GOOSE_DRIVER=postgres
      - GOOSE_MIGRATION_DIR=cmd/migrate/migrations
    volumes:
      - ./:/app
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --tries=1 --spider http://localhost:$$APP_PORT" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy

  proxy:
    container_name: proxy
    image: ghcr.io/a-h/templ:latest
    env_file: .env
    ports:
      - "${APP_PORT}:7331"
    command: generate --watch --proxy="http://server:$APP_PORT" --open-browser=false -v --proxybind=0.0.0.0
    volumes:
      - ./:/app
    working_dir: /app
    depends_on:
      server:
        condition: service_healthy

  tailwind:
    container_name: tailwind
    env_file: .env
    build:
      context: .
      dockerfile: tailwind.Dockerfile
    command: -c .air-tailwind.toml
    volumes:
      - ./:/app
    depends_on:
      proxy:
        condition: service_started

  sqlc:
    container_name: sqlc
    env_file: .env
    build:
      context: .
      dockerfile: sqlc.Dockerfile
    volumes:
      - ./:/app

  db:
    container_name: db
    env_file: .env
    image: postgres:latest
    ports:
      - "${DB_PORT}:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$DB_USER" ]
      interval: 5s
      timeout: 5s
      retries: 5
