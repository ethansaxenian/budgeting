package budgets

import (
	"fmt"
	"github.com/ethansaxenian/budgeting/database"
	"github.com/ethansaxenian/budgeting/util"
)

func sumPlanned(items []database.BudgetItem) float64 {
	sum := 0.0
	for _, item := range items {
		sum += item.Planned
	}
	return sum
}

func sumActual(items []database.BudgetItem) float64 {
	sum := 0.0
	for _, item := range items {
		sum += item.Actual
	}
	return sum
}

templ BudgetTable(items []database.BudgetItem, monthID int, transactionType database.TransactionType) {
	<table
		id="budget-table"
		class="text-left border-collapse h-0"
		hx-get={ string(templ.URL(fmt.Sprintf("/months/%d/budgets/%s", monthID, transactionType))) }
		hx-swap="outerHTML"
		hx-trigger="editTransaction from:body, newTransaction from:#add-transaction-button, deleteTransaction from:body"
		hx-target="this"
	>
		<thead>
			<tr class="border-b">
				<th scope="col" class="px-6 py-4">
					Category
				</th>
				<th scope="col" class="px-6 py-4">
					Budget
				</th>
				<th scope="col" class="px-6 py-4">
					Actual
				</th>
				<th scope="col" class="px-6 py-4">
					Difference
				</th>
			</tr>
		</thead>
		<tbody>
			for _, item := range items {
				@BudgetRow(item)
			}
		</tbody>
		<tfoot>
			@totalRow(items, sumPlanned(items), sumActual(items), transactionType)
		</tfoot>
	</table>
}

templ BudgetRow(b database.BudgetItem) {
	<tr class="border-b">
		<td class="px-4 py-2">
			@category(b.Category)
		</td>
		<td class="px-4 py-2">
			@planned(b)
		</td>
		<td class="px-4 py-2">
			@actual(b.Actual)
		</td>
		if b.TransactionType == database.TransactionTypeExpense {
			<td class="px-4 py-2">
				@difference(b.Planned - b.Actual)
			</td>
		} else {
			<td class="px-4 py-2">
				@difference(b.Actual - b.Planned)
			</td>
		}
	</tr>
}

templ category(category database.Category) {
	<span class="py-2 text-sm">{ util.Capitalize(string(category)) } </span>
}

templ planned(b database.BudgetItem) {
	<span class="flex flex-nowrap">
		<span class="py-2 text-sm">$</span>
		<input
			name="amount"
			class="bg-zinc-900 py-2 text-sm w-20"
			type="number"
			min="0"
			step=".01"
			placeholder="00.00"
			value={ util.FormatAmount(b.Planned) }
			hx-patch={ string(templ.URL(fmt.Sprintf("/budgets/%d", b.BudgetID))) }
			hx-target="closest #budget-table"
		/>
	</span>
}

templ actual(actual float64) {
	<span class="py-2 text-sm">{ util.FormatAmountWithDollarSign(actual) }</span>
}

templ difference(difference float64) {
	<span
		class={
			"py-2",
			"text-sm",
			templ.KV("text-red-500", difference < 0),
			templ.KV("text-green-600", difference > 0),
		}
	>
		{ util.FormatAmountWithDollarSign(difference) }
	</span>
}

templ totalRow(items []database.BudgetItem, sumPlanned, sumActual float64, transactionType database.TransactionType) {
	<tr>
		<td class="px-4 py-2">
			<span class="py-2 text-sm font-bold">Total</span>
		</td>
		<td class="px-4 py-2">
			<span class="py-2 text-sm">{ util.FormatAmountWithDollarSign(sumPlanned) }</span>
		</td>
		<td class="px-4 py-2">
			<span class="py-2 text-sm">{ util.FormatAmountWithDollarSign(sumActual) }</span>
		</td>
		<td class="px-4 py-2">
			switch transactionType {
				case database.TransactionTypeExpense:
					<span
						class={
							"py-2",
							"text-sm",
							templ.KV("text-red-500", sumPlanned-sumActual < 0),
							templ.KV("text-green-600", sumPlanned-sumActual > 0),
						}
					>
						{ util.FormatAmountWithDollarSign(sumPlanned-sumActual) }
					</span>
				case database.TransactionTypeIncome:
					<span
						class={
							"py-2",
							"text-sm",
							templ.KV("text-red-500", sumActual-sumPlanned < 0),
							templ.KV("text-green-600", sumActual-sumPlanned > 0),
						}
					>
						{ util.FormatAmountWithDollarSign(sumActual-sumPlanned) }
					</span>
			}
		</td>
	</tr>
}
