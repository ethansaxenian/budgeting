// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/ethansaxenian/budgeting/types"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (description, amount, date, category, transaction_type)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, date, amount, description, category, transaction_type, created_at, updated_at
`

type CreateTransactionParams struct {
	Description     sql.NullString
	Amount          float64
	Date            time.Time
	Category        types.Category
	TransactionType types.TransactionType
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Description,
		arg.Amount,
		arg.Date,
		arg.Category,
		arg.TransactionType,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Amount,
		&i.Description,
		&i.Category,
		&i.TransactionType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransactionByRow = `-- name: GetTransactionByRow :one
SELECT id, date, amount, description, category, transaction_type, created_at, updated_at FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionByRow(ctx context.Context, id int) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByRow, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Amount,
		&i.Description,
		&i.Category,
		&i.TransactionType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionsByTypeAndCategoryInDateRange = `-- name: GetTransactionsByTypeAndCategoryInDateRange :many
SELECT id, date, amount, description, category, transaction_type, created_at, updated_at
FROM transactions
WHERE transaction_type = $1 AND category = $2 AND date BETWEEN $3::date AND $4::date
`

type GetTransactionsByTypeAndCategoryInDateRangeParams struct {
	TransactionType types.TransactionType
	Category        types.Category
	StartDate       time.Time
	EndDate         time.Time
}

func (q *Queries) GetTransactionsByTypeAndCategoryInDateRange(ctx context.Context, arg GetTransactionsByTypeAndCategoryInDateRangeParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByTypeAndCategoryInDateRange,
		arg.TransactionType,
		arg.Category,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Amount,
			&i.Description,
			&i.Category,
			&i.TransactionType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByTypeInDateRange = `-- name: GetTransactionsByTypeInDateRange :many
SELECT id, date, amount, description, category, transaction_type, created_at, updated_at
FROM transactions
WHERE transaction_type = $1 AND date BETWEEN $2::date AND $3::date
`

type GetTransactionsByTypeInDateRangeParams struct {
	TransactionType types.TransactionType
	StartDate       time.Time
	EndDate         time.Time
}

func (q *Queries) GetTransactionsByTypeInDateRange(ctx context.Context, arg GetTransactionsByTypeInDateRangeParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByTypeInDateRange, arg.TransactionType, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Amount,
			&i.Description,
			&i.Category,
			&i.TransactionType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
SET description = $1, amount = $2, date = $3, category = $4
WHERE id = $5
`

type UpdateTransactionParams struct {
	Description sql.NullString
	Amount      float64
	Date        time.Time
	Category    types.Category
	ID          int
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.Description,
		arg.Amount,
		arg.Date,
		arg.Category,
		arg.ID,
	)
	return err
}
