// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: months.sql

package database

import (
	"context"

	"time"
)

const createMonth = `-- name: CreateMonth :one
INSERT INTO months (month, year)
VALUES ($1, $2)
RETURNING id, year, month, created_at, updated_at
`

type CreateMonthParams struct {
	Month time.Month
	Year  int
}

// CreateMonth
//
//	INSERT INTO months (month, year)
//	VALUES ($1, $2)
//	RETURNING id, year, month, created_at, updated_at
func (q *Queries) CreateMonth(ctx context.Context, arg CreateMonthParams) (Month, error) {
	row := q.db.QueryRowContext(ctx, createMonth, arg.Month, arg.Year)
	var i Month
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Month,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllMonths = `-- name: GetAllMonths :many
SELECT id, year, month, created_at, updated_at FROM months
`

// GetAllMonths
//
//	SELECT id, year, month, created_at, updated_at FROM months
func (q *Queries) GetAllMonths(ctx context.Context) ([]Month, error) {
	rows, err := q.db.QueryContext(ctx, getAllMonths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Month{}
	for rows.Next() {
		var i Month
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.Month,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthByID = `-- name: GetMonthByID :one
SELECT id, year, month, created_at, updated_at FROM months WHERE id = $1
`

// GetMonthByID
//
//	SELECT id, year, month, created_at, updated_at FROM months WHERE id = $1
func (q *Queries) GetMonthByID(ctx context.Context, id int) (Month, error) {
	row := q.db.QueryRowContext(ctx, getMonthByID, id)
	var i Month
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Month,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMonthByMonthAndYear = `-- name: GetMonthByMonthAndYear :one
SELECT id, year, month, created_at, updated_at FROM months WHERE month=$1 AND year=$2
`

type GetMonthByMonthAndYearParams struct {
	Month time.Month
	Year  int
}

// GetMonthByMonthAndYear
//
//	SELECT id, year, month, created_at, updated_at FROM months WHERE month=$1 AND year=$2
func (q *Queries) GetMonthByMonthAndYear(ctx context.Context, arg GetMonthByMonthAndYearParams) (Month, error) {
	row := q.db.QueryRowContext(ctx, getMonthByMonthAndYear, arg.Month, arg.Year)
	var i Month
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Month,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
