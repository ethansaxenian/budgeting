// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Category string

const (
	CategoryBonus          Category = "bonus"
	CategoryCashback       Category = "cashback"
	CategoryFood           Category = "food"
	CategoryGifts          Category = "gifts"
	CategoryHome           Category = "home"
	CategoryInterest       Category = "interest"
	CategoryMedical        Category = "medical"
	CategoryOther          Category = "other"
	CategoryPaycheck       Category = "paycheck"
	CategoryPersonal       Category = "personal"
	CategorySavings        Category = "savings"
	CategoryTransportation Category = "transportation"
	CategoryTravel         Category = "travel"
	CategoryUtilities      Category = "utilities"
)

func (e *Category) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Category(s)
	case string:
		*e = Category(s)
	default:
		return fmt.Errorf("unsupported scan type for Category: %T", src)
	}
	return nil
}

type NullCategory struct {
	Category Category
	Valid    bool // Valid is true if Category is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategory) Scan(value interface{}) error {
	if value == nil {
		ns.Category, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Category.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Category), nil
}

func AllCategoryValues() []Category {
	return []Category{
		CategoryFood,
		CategoryGifts,
		CategoryMedical,
		CategoryHome,
		CategoryTransportation,
		CategoryPersonal,
		CategorySavings,
		CategoryUtilities,
		CategoryTravel,
		CategoryOther,
		CategoryPaycheck,
		CategoryBonus,
		CategoryInterest,
		CategoryCashback,
	}
}

type TransactionType string

const (
	TransactionTypeExpense TransactionType = "expense"
	TransactionTypeIncome  TransactionType = "income"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

func AllTransactionTypeValues() []TransactionType {
	return []TransactionType{
		TransactionTypeExpense,
		TransactionTypeIncome,
	}
}

type Budget struct {
	ID              int
	MonthID         int
	Category        Category
	Amount          float64
	TransactionType TransactionType
	CreatedAt       time.Time
	UpdatedAt       sql.NullTime
}

type BudgetItem struct {
	BudgetID        int
	MonthID         int
	Category        Category
	TransactionType TransactionType
	Planned         float64
	Actual          float64
}

type Month struct {
	ID        int
	Year      int
	Month     time.Month
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

type Transaction struct {
	ID              int
	Date            time.Time
	Amount          float64
	Description     string
	Category        Category
	TransactionType TransactionType
	CreatedAt       time.Time
	UpdatedAt       sql.NullTime
}
